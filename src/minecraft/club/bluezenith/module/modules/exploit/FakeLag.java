package club.bluezenith.module.modules.exploit;

import club.bluezenith.events.Listener;
import club.bluezenith.events.impl.PacketEvent;
import club.bluezenith.events.impl.UpdatePlayerEvent;
import club.bluezenith.module.Module;
import club.bluezenith.module.ModuleCategory;
import club.bluezenith.module.value.types.IntegerValue;
import club.bluezenith.util.client.MillisTimer;
import club.bluezenith.util.player.PacketUtil;
import club.bluezenith.util.math.MathUtil;
import net.minecraft.network.EnumPacketDirection;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;

import java.util.ArrayList;

public class FakeLag extends Module {

    private final IntegerValue ticksToSkipMin = new IntegerValue("Ticks to skip min", 0, 0, 200, 0, true, null).setIndex(1);
    private final IntegerValue ticksToSkipMax = new IntegerValue("Ticks to skip max", 5, 0, 200, 0, true, null).setIndex(2);
    private final MillisTimer tickTimer = new MillisTimer();
    private final MillisTimer disablerTimer = new MillisTimer();
    private short phase = 0;
    private float playerYaw;
    private float playerPitch;
    public static boolean canStrafe = false;
    private C03PacketPlayer lastc03;

    int ticksToSkip = -1;
    private final ArrayList<Packet<?>> packets = new ArrayList<Packet<?>>();
    private final ArrayList<Packet<?>> rotationPackets = new ArrayList<Packet<?>>();
    boolean lmao;
    MillisTimer timer = new MillisTimer();

    public FakeLag() {
        super("FakeLag", ModuleCategory.EXPLOIT);
    }

    @Listener
    public void onPacket(PacketEvent event) {
        if (mc.thePlayer == null) return;
        if (event.direction == EnumPacketDirection.SERVERBOUND || mc.isSingleplayer()) return;

        if (tickTimer.hasTimeReached(50)) {
            event.cancel();
            packets.add(event.packet);
            if (!packets.isEmpty()) {
                final Packet<?>[] p = packets.toArray(new Packet[0]);
                for (Packet<?> packet : p) {
                    PacketUtil.sendSilent(packet);
                }
                packets.clear();
            }
            ticksToSkip = MathUtil.getRandomInt(50, 100);
            tickTimer.reset();
        }
        else {
            event.cancel();
            packets.add(event.packet);
        }
    }

    @Listener
    public void onUpdate(UpdatePlayerEvent event) {
        playerYaw = event.yaw;
        playerPitch = event.pitch;
    }

    @Override
    public void onEnable() {
        packets.clear();
        tickTimer.reset();
    }

    @Override
    public void onDisable() {
        if (!packets.isEmpty()) {
            for (Packet<?> packet : packets) {
                PacketUtil.sendSilent(packet);
            }
            packets.clear();
            ticksToSkip = MathUtil.getRandomInt(50, 100);
        }
    }
}
