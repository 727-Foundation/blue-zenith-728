package club.bluezenith.module.modules.exploit;

import club.bluezenith.events.Listener;
import club.bluezenith.events.impl.PacketEvent;
import club.bluezenith.events.impl.Render2DEvent;
import club.bluezenith.events.impl.SpawnPlayerEvent;
import club.bluezenith.events.impl.UpdatePlayerEvent;
import club.bluezenith.module.Module;
import club.bluezenith.module.ModuleCategory;
import club.bluezenith.module.modules.exploit.disabler.Botting;
import club.bluezenith.module.modules.exploit.disabler.PulsiveHVH;
import club.bluezenith.module.modules.exploit.disabler.VelocityTest;
import club.bluezenith.module.modules.movement.LongJump2;
import club.bluezenith.module.modules.player.Scaffold;
import club.bluezenith.module.modules.render.hud.HUD;
import club.bluezenith.module.value.types.BooleanValue;
import club.bluezenith.module.value.types.ExtendedModeValue;
import club.bluezenith.module.value.types.IntegerValue;
import club.bluezenith.ui.clickgui.ClickGui;
import club.bluezenith.ui.draggables.Draggable;
import club.bluezenith.util.client.MillisTimer;
import club.bluezenith.util.client.Pair;
import club.bluezenith.util.math.MathUtil;
import club.bluezenith.util.player.PacketUtil;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.item.ItemSword;
import net.minecraft.network.EnumPacketDirection;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;

import java.awt.*;
import java.util.ArrayList;

import static club.bluezenith.BlueZenith.getBlueZenith;
import static club.bluezenith.util.math.MathUtil.round;
import static club.bluezenith.util.render.RenderUtil.rect;

public class Disabler extends Module {

    private final WatchdogMode watchdogMode = new WatchdogMode();

    public final ExtendedModeValue mode = new ExtendedModeValue(
            this,
            "Mode",
            new Pair<>("Watchdog", watchdogMode),
            new Pair<>("PulsiveHVH", new PulsiveHVH()),
            new Pair<>("Botting", new Botting()),
            new Pair<>("Watchdog Velocity", new VelocityTest())
    ).setIndex(1);

    private final BooleanValue watchdogTimer = new BooleanValue("Timer bypass", false)
            .showIf(() -> mode.is("Watchdog"))
            .setIndex(2);
    private final IntegerValue fakeLagMS = new IntegerValue("Delay (ms)", 150, 100, 400, 10)
            .showIf(() -> mode.is("Watchdog"))
            .setIndex(3);

    public Disabler() {
        super("Disabler", ModuleCategory.EXPLOIT);

        getBlueZenith().registerStartupTask(bz -> bz.getDraggableRenderer().addDraggable(watchdogMode));
    }

    @Override
    public String getTag() {
        return mode.get().getKey();
    }

    private final MillisTimer bypassErrorTimer = new MillisTimer();
    private long nextDelayMS = 150_000;

    private float balance;
    private final class WatchdogMode implements ExtendedModeValue.Mode, Draggable {

        private boolean setPosition;
        private float posX, posY, width, height;

        private int transactions;
        private ArrayList<Packet<?>> c03s = new ArrayList<>();
        private ArrayList<Packet<?>> c0fs = new ArrayList<>();
        private MillisTimer c03timer = new MillisTimer();
        private MillisTimer c0ftimer = new MillisTimer();
        private int newKey = 0;

        @Listener
        public void onUpdate(UpdatePlayerEvent event) {
            if(bypassErrorTimer.hasTimeReached(nextDelayMS)) {
                getBlueZenith().getNotificationPublisher().postError(
                        "Bypass Error",
                        "Possible WD ban. Please rejoin or finish your match quickly.",
                        3000
                );
                nextDelayMS = MathUtil.getRandomLong(40_000, 120_000);
                bypassErrorTimer.reset();
            }
        }

        @Listener
        public void onPacket(PacketEvent event) {
            if(event.direction == EnumPacketDirection.SERVERBOUND) return;
            if(mc.getNetHandler() == null || mc.getNetHandler().getNetworkManager() == null) return;

            if(!watchdogTimer.get()) return;

            if(event.packet instanceof C0FPacketConfirmTransaction) transactions++;

            if (event.packet instanceof C03PacketPlayer
                    && !(event.packet instanceof C04PacketPlayerPosition)
                    && !(event.packet instanceof C03PacketPlayer.C05PacketPlayerLook)
                    && !(event.packet instanceof C03PacketPlayer.C06PacketPlayerPosLook))
            {
                event.cancel();

                if(transactions > 1) {
                    balance += 1 / mc.timer.timerSpeed;
                }
            }

            if ((event.packet instanceof C04PacketPlayerPosition
                    || event.packet instanceof C03PacketPlayer.C05PacketPlayerLook
                    || event.packet instanceof C03PacketPlayer.C06PacketPlayerPosLook)) {
                balance -= (mc.timer.timerSpeed - 1) * (1 / mc.timer.timerSpeed);
                c03s.add(event.packet);
                event.cancel();
            }

            if (event.packet instanceof C0FPacketConfirmTransaction) {
                c03s.add(event.packet);
                event.cancel();
            }

            if (event.packet instanceof C00PacketKeepAlive) {
                c03s.add(event.packet);
                event.cancel();
            }

            /*if (c0ftimer.hasTimeReached(450)) {
                for (Packet<?> packet : c0fs) {
                    PacketUtil.sendSilent(packet);
                }
                c0fs.clear();
                c0ftimer.reset();
            }*/

            boolean cond = event.packet instanceof C08PacketPlayerBlockPlacement && ((C08PacketPlayerBlockPlacement) event.packet).placedBlockDirection != 255;

            if (c03timer.hasTimeReached(fakeLagMS.get()) || getCastedModule(LongJump2.class).getState() || getCastedModule(Scaffold.class).getState()) {
                //ClientUtils.fancyMessage("sent: " + c03s.size());
                boolean isBlocking = player != null && player.isUsingItem() && player.getItemInUse().getItem() instanceof ItemSword
                        && !getBlueZenith().getModuleManager().getModule(Scaffold.class).getState();

                if (isBlocking)
                    PacketUtil.sendSilent(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN));

                Packet<?>[] c03s = new Packet<?>[this.c03s.size()];
                c03s = this.c03s.toArray(c03s);

                for (Packet<?> packet : c03s) {
                    PacketUtil.sendSilent(packet);
                }

                if (isBlocking)
                    PacketUtil.sendSilent(new C08PacketPlayerBlockPlacement(player.getItemInUse()));

                this.c03s.clear();
                c03timer.reset();
            }
        }

        @Listener
        public void onRespawn(SpawnPlayerEvent event) {
            balance = 0;
            transactions = 0;
            nextDelayMS = MathUtil.getRandomLong(100_000, 300_000);
            bypassErrorTimer.reset();
        }

        @Override
        public void onEnable(Module module) {
            balance = 0;
            transactions = 0;
        }

        @Override
        public boolean shouldBeRendered() {
            return getState() && mode.is("Watchdog") && watchdogTimer.get();
        }

        @Override
        public boolean isMouseOver(int mouseX, int mouseY) {
            return ClickGui.i(mouseX, mouseY, posX, posY, posX + width, posY + height);
        }

        @Override
        public void draw(Render2DEvent event) {
            if (!watchdogTimer.get()) return;
            final FontRenderer font = HUD.module.font.get();
            final String text = "Balance: " + round(balance, 1);
            final int textWidth = font.getStringWidth(text);

            if(!setPosition) {
                posX = event.resolution.getScaledWidth() / 2F - (textWidth / 2F);
                posY = (float) (event.resolution.getScaledHeight() - 80);
                setPosition = true;
            }

            rect(posX - 2, posY - 2, posX + (width = textWidth + 2), posY + (height = font.FONT_HEIGHT + 2), new Color(30, 30, 30, 150).getRGB());
            font.drawStringWithShadow(text, posX, posY, new Color(255, 255, 255, 255).getRGB());
        }

        @Override
        public float getX() {
            return posX;
        }

        @Override
        public float getY() {
            return posY;
        }

        @Override
        public void moveTo(float x, float y) {
            this.posX = x;
            this.posY = y;
        }

        @Override
        public void mouseClicked(int mouseX, int mouseY, int mouseButton) {

        }
    }

    public float getBalance() {
        return balance;
    }

    public void decreaseBalance(float by) {
        if(getState() && mode.is("Watchdog"))
         this.balance -= by;
    }
}
