package club.bluezenith.module.modules.exploit;

import club.bluezenith.events.Listener;
import club.bluezenith.events.impl.CollisionEvent;
import club.bluezenith.events.impl.UpdatePlayerEvent;
import club.bluezenith.module.Module;
import club.bluezenith.module.ModuleCategory;
import club.bluezenith.module.value.types.BooleanValue;
import club.bluezenith.module.value.types.ExtendedModeValue;
import club.bluezenith.module.value.types.ExtendedModeValue.Mode;
import club.bluezenith.module.value.types.ModeValue;
import club.bluezenith.util.client.Pair;
import club.bluezenith.util.player.PacketUtil;
import club.bluezenith.util.player.PlayerUtil;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.util.AxisAlignedBB;

import static club.bluezenith.module.value.builders.AbstractBuilder.createBoolean;
import static club.bluezenith.module.value.builders.AbstractBuilder.createMode;

public class NoFall extends Module {
    private static final double MATH_GROUND = 1.0 / 64.0,
                                MATH_GROUND_THRESHOLD = 0.005;
    private final ExtendedModeValue mode = new ExtendedModeValue(
            this,
            "Mode",
            new Pair<>("Collision", ExtendedModeValue.EMPTY_MODE), //handled in onCollision
            new Pair<>("Watchdog", new WatchdogMode()),
            new Pair<>("Edit", new EditOrPacketMode()),
            new Pair<>("Packet", new EditOrPacketMode()),
            new Pair<>("Spoof", new SpoofMode())
    ).setIndex(1);

    private final BooleanValue voidCheck = new BooleanValue("Void check", true).setIndex(2);

    private final ModeValue spoofMode = createMode("Spoof")
            .index(3)
            .range("On ground, Off ground")
            .showIf(() -> mode.is("Spoof"))
            .build();

    private final BooleanValue spoofIncrementY = createBoolean("Increment Y")
            .index(4)
            .showIf(() -> spoofMode.isVisible() && spoofMode.is("Off ground"))
            .build();

    private double lastGroundY, voidFallDistance;

    public NoFall() {
        super("NoFall", ModuleCategory.EXPLOIT);
    }

    //collision nofall
    @Listener
    public void onCollision(CollisionEvent event) {
        if(!mode.is("Collision")) return;
        if(player == null) return;
        if(player.fallDistance < 2.5
                || event.pos.getY() >= player.posY
                || event.pos.getY() <= player.posY - 2.5) return;

        event.boundingBox = AxisAlignedBB.fromBounds(
                -5, -1, -5, 5, 0, 5
        ).offset(event.pos.getX(), event.pos.getY(), event.pos.getZ());
    }

    private class WatchdogMode implements Mode {

        @Listener
        public void onPlayerUpdate(UpdatePlayerEvent event) {
            if(isFallingInVoid() || player.fallDistance < 2.5) return;
            if(player.posY % MATH_GROUND <= MATH_GROUND_THRESHOLD) return;

            PacketUtil.sendSilent(new C03PacketPlayer(true));
        }

    }

    private class EditOrPacketMode implements Mode {

        @Listener
        public void onPlayerUpdate(UpdatePlayerEvent event) {
            if(isFallingInVoid() || player.fallDistance < 2.5 || event.isPost()) return;

            if(mode.is("Edit"))
                event.onGround = true;
            else if(mode.is("Packet"))
                PacketUtil.sendSilent(new C03PacketPlayer(true));
            player.fallDistance = 0;
        }

    }

    private class SpoofMode implements Mode {

        @Listener
        public void onPlayerUpdate(UpdatePlayerEvent event) {
            if(isFallingInVoid() && spoofMode.is("On ground")) return;

            event.onGround = spoofMode.is("On ground");

            if(spoofIncrementY.isVisible() && spoofIncrementY.get())
                event.y += 0.00000000000001;
        }

    }

    @Listener
    public void onPlayerUpdate(UpdatePlayerEvent event) {
        if(PlayerUtil.isVoidBelow() && player.fallDistance > 2.5) {
            voidFallDistance = lastGroundY - event.y;
            return;
        }

        if(player.onGround) {
            voidFallDistance = 0;
            lastGroundY = event.y;
        }
    }

    private boolean isFallingInVoid() {
        return voidCheck.get() && voidFallDistance > 5;
    }


}
